/* The following code was generated by JFlex 1.4.3 on 3/3/15 2:06 PM */

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.r4intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.r4intellij.psi.RTypes.*;


import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/3/15 2:06 PM from the specification file
 * <tt>/Users/moon/Projects/git-projects/r4intellij/src/com/r4intellij/lang/lexer/r.flex</tt>
 */
public class _RLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FUNCTION_CALL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\1\1\0\1\16\1\1\22\0\1\16\1\54\1\14"+
    "\1\2\1\70\1\65\1\60\1\15\1\46\1\47\1\64\1\11\1\45"+
    "\1\62\1\12\1\66\1\5\11\6\1\44\1\43\1\57\1\55\1\56"+
    "\1\72\1\71\4\3\1\10\6\3\1\7\1\3\1\41\6\3\1\42"+
    "\5\3\1\52\1\13\1\53\1\67\1\4\1\0\1\35\1\34\1\22"+
    "\1\3\1\32\1\17\1\3\1\30\1\24\1\3\1\36\1\31\1\3"+
    "\1\21\1\25\1\40\1\3\1\26\1\33\1\23\1\20\1\3\1\27"+
    "\1\37\2\3\1\50\1\61\1\51\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\1\1\3\1\4\2\5\1\6"+
    "\1\4\2\7\1\10\10\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\3\1\0\3\5\1\4"+
    "\3\7\3\4\1\41\1\42\5\4\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\2\0\1\33\1\3\1\5\1\0\1\4\1\56"+
    "\1\4\1\57\6\4\1\60\1\61\1\62\1\63\1\3"+
    "\1\5\1\4\1\64\2\4\1\65\1\4\1\66\1\3"+
    "\2\4\1\67\1\70\1\0\1\3\1\4\1\71\1\0"+
    "\1\3\1\4\1\72\1\3\1\73\160\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0162"+
    "\0\73\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\73\0\u0461\0\73"+
    "\0\73\0\73\0\73\0\73\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\73\0\73\0\u06af"+
    "\0\73\0\73\0\73\0\73\0\73\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\73\0\u07d6\0\u0811\0\u084c\0\73\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\354\0\354\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u0ad5\0\73\0\73\0\73\0\u0b10\0\u0b4b\0\u0b86\0\73"+
    "\0\u0bc1\0\u0bfc\0\u0bfc\0\u0c37\0\354\0\u0c72\0\354\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\73\0\73\0\73"+
    "\0\73\0\u0e0f\0\u0e4a\0\u0e85\0\354\0\u0ec0\0\u0efb\0\354"+
    "\0\u0f36\0\354\0\u0f71\0\u0fac\0\u0fe7\0\354\0\354\0\u1022"+
    "\0\u105d\0\u1098\0\354\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\354\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\2\6"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\6"+
    "\1\17\2\6\1\20\1\6\1\21\1\22\2\6\1\23"+
    "\1\6\1\24\4\6\1\25\1\6\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\74\0\1\4\71\0"+
    "\1\56\1\0\1\57\70\56\3\0\6\6\1\0\1\6"+
    "\4\0\24\6\35\0\2\7\1\0\1\60\1\0\1\61"+
    "\17\0\1\60\45\0\2\10\1\62\1\60\1\0\1\61"+
    "\17\0\1\60\43\0\2\6\2\63\2\6\1\0\1\64"+
    "\4\0\24\6\30\0\13\13\1\65\1\66\56\13\13\14"+
    "\1\67\1\14\1\66\55\14\16\0\1\15\57\0\6\6"+
    "\1\0\1\6\4\0\1\6\1\70\4\6\1\71\15\6"+
    "\33\0\6\6\1\0\1\6\4\0\13\6\1\72\10\6"+
    "\33\0\6\6\1\0\1\6\4\0\1\73\1\6\1\74"+
    "\21\6\33\0\6\6\1\0\1\6\4\0\13\6\1\75"+
    "\10\6\33\0\6\6\1\0\1\6\4\0\11\6\1\76"+
    "\12\6\33\0\6\6\1\0\1\6\4\0\12\6\1\77"+
    "\11\6\33\0\6\6\1\0\1\6\4\0\7\6\1\100"+
    "\14\6\33\0\6\6\1\0\1\6\4\0\23\6\1\101"+
    "\74\0\1\102\100\0\1\103\73\0\1\104\74\0\1\105"+
    "\72\0\1\106\72\0\1\107\72\0\1\110\1\0\1\111"+
    "\2\0\1\112\70\0\1\113\73\0\1\114\67\0\1\115"+
    "\25\0\1\116\12\0\1\117\1\116\11\0\1\116\16\0"+
    "\1\116\5\0\1\116\1\120\1\116\4\0\1\56\1\0"+
    "\72\56\1\0\1\121\70\56\5\0\2\122\2\0\1\123"+
    "\50\0\1\123\15\0\2\61\1\0\1\60\21\0\1\60"+
    "\43\0\2\6\2\63\1\6\1\124\1\0\1\6\4\0"+
    "\13\6\1\124\10\6\33\0\6\6\1\0\1\125\4\0"+
    "\24\6\30\0\1\13\1\0\71\13\1\14\1\0\71\14"+
    "\3\0\6\6\1\0\1\6\4\0\2\6\1\126\21\6"+
    "\33\0\6\6\1\0\1\6\4\0\7\6\1\127\14\6"+
    "\33\0\6\6\1\0\1\6\4\0\20\6\1\130\3\6"+
    "\33\0\6\6\1\0\1\6\4\0\21\6\1\131\2\6"+
    "\33\0\6\6\1\0\1\6\4\0\5\6\1\132\16\6"+
    "\33\0\6\6\1\0\1\6\4\0\14\6\1\133\7\6"+
    "\33\0\6\6\1\0\1\6\4\0\13\6\1\134\10\6"+
    "\33\0\4\6\1\135\1\6\1\0\1\6\4\0\24\6"+
    "\74\0\1\136\110\0\1\137\66\0\1\140\101\0\1\141"+
    "\26\0\1\116\51\0\1\56\1\0\1\142\70\56\5\0"+
    "\2\122\67\0\2\6\2\143\2\6\1\123\1\6\4\0"+
    "\24\6\17\0\1\123\13\0\6\6\1\0\1\6\4\0"+
    "\3\6\1\144\20\6\33\0\6\6\1\0\1\6\4\0"+
    "\4\6\1\145\17\6\33\0\6\6\1\0\1\6\4\0"+
    "\13\6\1\146\10\6\33\0\6\6\1\0\1\6\4\0"+
    "\12\6\1\147\11\6\33\0\6\6\1\0\1\6\4\0"+
    "\13\6\1\150\10\6\33\0\6\6\1\0\1\6\4\0"+
    "\16\6\1\151\5\6\33\0\4\6\1\152\1\6\1\0"+
    "\1\6\4\0\24\6\30\0\1\56\1\0\1\153\70\56"+
    "\3\0\2\6\2\143\2\6\1\0\1\6\4\0\24\6"+
    "\33\0\6\6\1\0\1\6\4\0\4\6\1\154\17\6"+
    "\33\0\6\6\1\0\1\6\4\0\16\6\1\155\5\6"+
    "\33\0\6\6\1\0\1\6\4\0\13\6\1\156\10\6"+
    "\33\0\6\6\1\0\1\6\4\0\17\6\1\157\4\6"+
    "\30\0\1\56\1\160\1\161\70\56\3\0\6\6\1\0"+
    "\1\6\4\0\5\6\1\162\16\6\33\0\6\6\1\0"+
    "\1\6\4\0\4\6\1\163\17\6\32\0\1\164\70\0"+
    "\1\56\1\160\1\165\70\56\3\0\6\6\1\0\1\6"+
    "\4\0\6\6\1\166\15\6\32\0\1\167\70\0\1\56"+
    "\1\160\1\170\70\56\3\0\6\6\1\0\1\6\4\0"+
    "\2\6\1\171\21\6\30\0\1\167\1\0\71\167\1\56"+
    "\1\160\1\172\71\56\1\160\1\173\71\56\1\160\1\174"+
    "\71\56\1\160\1\175\71\56\1\160\1\176\71\56\1\160"+
    "\1\177\71\56\1\160\1\200\71\56\1\160\1\201\71\56"+
    "\1\160\1\202\71\56\1\160\1\203\71\56\1\160\1\204"+
    "\71\56\1\160\1\205\71\56\1\160\1\206\71\56\1\160"+
    "\1\207\71\56\1\160\1\210\71\56\1\160\1\211\71\56"+
    "\1\160\1\212\71\56\1\160\1\213\71\56\1\160\1\214"+
    "\71\56\1\160\1\215\71\56\1\160\1\216\71\56\1\160"+
    "\1\217\71\56\1\160\1\220\71\56\1\160\1\221\71\56"+
    "\1\160\1\222\71\56\1\160\1\223\71\56\1\160\1\224"+
    "\71\56\1\160\1\225\71\56\1\160\1\226\71\56\1\160"+
    "\1\227\71\56\1\160\1\230\71\56\1\160\1\231\71\56"+
    "\1\160\1\232\71\56\1\160\1\233\71\56\1\160\1\234"+
    "\71\56\1\160\1\235\71\56\1\160\1\236\71\56\1\160"+
    "\1\237\71\56\1\160\1\240\71\56\1\160\1\241\71\56"+
    "\1\160\1\242\71\56\1\160\1\243\71\56\1\160\1\244"+
    "\71\56\1\160\1\245\71\56\1\160\1\246\71\56\1\160"+
    "\1\247\71\56\1\160\1\250\71\56\1\160\1\251\71\56"+
    "\1\160\1\252\71\56\1\160\1\253\71\56\1\160\1\254"+
    "\71\56\1\160\1\255\71\56\1\160\1\256\71\56\1\160"+
    "\1\257\71\56\1\160\1\260\71\56\1\160\1\261\71\56"+
    "\1\160\1\262\71\56\1\160\1\263\71\56\1\160\1\264"+
    "\71\56\1\160\1\265\71\56\1\160\1\266\71\56\1\160"+
    "\1\267\71\56\1\160\1\270\71\56\1\160\1\271\71\56"+
    "\1\160\1\272\71\56\1\160\1\273\71\56\1\160\1\274"+
    "\71\56\1\160\1\275\71\56\1\160\1\276\71\56\1\160"+
    "\1\277\71\56\1\160\1\300\71\56\1\160\1\301\71\56"+
    "\1\160\1\302\71\56\1\160\1\303\71\56\1\160\1\304"+
    "\71\56\1\160\1\305\71\56\1\160\1\306\71\56\1\160"+
    "\1\307\71\56\1\160\1\310\71\56\1\160\1\311\71\56"+
    "\1\160\1\312\71\56\1\160\1\313\71\56\1\160\1\314"+
    "\71\56\1\160\1\315\71\56\1\160\1\316\71\56\1\160"+
    "\1\317\71\56\1\160\1\320\71\56\1\160\1\321\71\56"+
    "\1\160\1\322\71\56\1\160\1\323\71\56\1\160\1\324"+
    "\71\56\1\160\1\325\71\56\1\160\1\326\71\56\1\160"+
    "\1\327\71\56\1\160\1\330\71\56\1\160\1\331\71\56"+
    "\1\160\1\332\71\56\1\160\1\333\71\56\1\160\1\334"+
    "\71\56\1\160\1\335\71\56\1\160\1\336\71\56\1\160"+
    "\1\337\71\56\1\160\1\340\71\56\1\160\1\341\71\56"+
    "\1\160\1\342\71\56\1\160\1\343\71\56\1\160\1\344"+
    "\71\56\1\160\1\345\71\56\1\160\1\346\71\56\1\160"+
    "\1\347\71\56\1\160\1\350\71\56\1\160\1\351\71\56"+
    "\1\160\71\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11210];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\10\1\11\5\1\1\11\14\1\1\11\1\1"+
    "\5\11\11\1\2\11\1\1\5\11\2\1\1\0\1\1"+
    "\1\11\3\1\1\11\14\1\6\11\1\0\3\11\1\1"+
    "\2\0\1\11\2\1\1\0\12\1\4\11\16\1\1\0"+
    "\3\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();

  //helper
  long yychar = 0;

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  public _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return R_SYMBOL_FORMALS;
          }
        case 60: break;
        case 42: 
          { return R_LEFT_ASSIGN;
          }
        case 61: break;
        case 14: 
          { return R_LEFT_BRACE;
          }
        case 62: break;
        case 47: 
          { return R_FOR;
          }
        case 63: break;
        case 54: 
          { return R_NULL_CONST;
          }
        case 64: break;
        case 57: 
          { return R_REPEAT;
          }
        case 65: break;
        case 27: 
          { return R_ARITH_MOD;
          }
        case 66: break;
        case 24: 
          { return R_ARITH_MINUS;
          }
        case 67: break;
        case 31: 
          { return R_SLOT;
          }
        case 68: break;
        case 19: 
          { return R_EQ_ASSIGN;
          }
        case 69: break;
        case 23: 
          { return R_OR;
          }
        case 70: break;
        case 34: 
          { return R_IN;
          }
        case 71: break;
        case 3: 
          { return R_COMMENT;
          }
        case 72: break;
        case 48: 
          { return R_NS_GET_INT;
          }
        case 73: break;
        case 43: 
          { return R_AND2;
          }
        case 74: break;
        case 28: 
          { return R_ARITH_DIV;
          }
        case 75: break;
        case 25: 
          { return R_TILDE;
          }
        case 76: break;
        case 36: 
          { return R_LBB;
          }
        case 77: break;
        case 49: 
          { return R_GLOBAL_LEFT_ASSIGN;
          }
        case 78: break;
        case 58: 
          { return R_SECTION_COMMENT;
          }
        case 79: break;
        case 17: 
          { return R_RIGHT_BRACKET;
          }
        case 80: break;
        case 40: 
          { return R_GE;
          }
        case 81: break;
        case 53: 
          { return R_ELSE;
          }
        case 82: break;
        case 45: 
          { return R_RIGHT_ASSIGN;
          }
        case 83: break;
        case 11: 
          { return R_COMMA;
          }
        case 84: break;
        case 20: 
          { return R_GT;
          }
        case 85: break;
        case 6: 
          { return R_ARITH_PLUS;
          }
        case 86: break;
        case 32: 
          { return R_QUESTION;
          }
        case 87: break;
        case 38: 
          { return R_NE;
          }
        case 88: break;
        case 51: 
          { return R_ARITH_MISC;
          }
        case 89: break;
        case 35: 
          { return R_NS_GET;
          }
        case 90: break;
        case 52: 
          { return R_NEXT;
          }
        case 91: break;
        case 10: 
          { return R_COLON;
          }
        case 92: break;
        case 30: 
          { return R_LIST_SUBSET;
          }
        case 93: break;
        case 1: 
          { return R_EOL;
          }
        case 94: break;
        case 59: 
          { return R_FUNCTION;
          }
        case 95: break;
        case 13: 
          { return R_RIGHT_PAREN;
          }
        case 96: break;
        case 39: 
          { return R_EQ;
          }
        case 97: break;
        case 22: 
          { return R_AND;
          }
        case 98: break;
        case 16: 
          { return R_LEFT_BRACKET;
          }
        case 99: break;
        case 37: 
          { return R_RBB;
          }
        case 100: break;
        case 18: 
          { return R_NEGATION;
          }
        case 101: break;
        case 12: 
          { return R_LEFT_PAREN;
          }
        case 102: break;
        case 9: 
          { return R_SEMICOLON;
          }
        case 103: break;
        case 26: 
          { return R_ARITH_MULT;
          }
        case 104: break;
        case 41: 
          { return R_LE;
          }
        case 105: break;
        case 33: 
          { return R_IF;
          }
        case 106: break;
        case 8: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 107: break;
        case 44: 
          { return R_OR2;
          }
        case 108: break;
        case 21: 
          { return R_LT;
          }
        case 109: break;
        case 55: 
          { return R_WHILE;
          }
        case 110: break;
        case 29: 
          { return R_ARITH_EXPONENTIAION;
          }
        case 111: break;
        case 15: 
          { return R_RIGHT_BRACE;
          }
        case 112: break;
        case 5: 
          { return R_NUM_CONST;
          }
        case 113: break;
        case 50: 
          { return R_GLOBAL_RIGHT_ASSIGN;
          }
        case 114: break;
        case 56: 
          { return R_BREAK;
          }
        case 115: break;
        case 7: 
          { return R_STR_CONST;
          }
        case 116: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 117: break;
        case 4: 
          { return R_SYMBOL;
          }
        case 118: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
